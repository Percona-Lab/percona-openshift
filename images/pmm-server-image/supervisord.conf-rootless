[unix_http_server]
chmod = 0700
username = dummy
password = dummy
file = /tmp/supervisord.sock

[supervisord]
childlogdir = /var/log/supervisor
nodaemon = true
pidfile = /tmp/supervisord.pid

[supervisorctl]
username = dummy
password = dummy
serverurl = unix:///tmp/supervisor.sock

[program:mysql]
priority = 1
command =
    /usr/sbin/mysqld
        --basedir=/usr
        --datadir=/var/lib/mysql
        --plugin-dir=/usr/lib64/mysql/plugin
        --pid-file=/var/run/mysqld/mysqld.pid
        --socket=/var/lib/mysql/mysql.sock
stdout_logfile = /var/log/mysql.log
stderr_logfile = /var/log/mysql.log
autorestart = true

[program:consul]
priority = 2
command =
    /usr/sbin/consul
        agent
        -server
        -data-dir="/opt/consul-data"
        -bootstrap
        -client="0.0.0.0"
        -advertise="127.0.0.1"
        -ui
stdout_logfile = /var/log/consul.log
stderr_logfile = /var/log/consul.log
autorestart = true

[program:grafana]
priority = 3
directory = /usr/share/grafana
environment = HOME=/usr/share/grafana
command =
    /usr/sbin/grafana-server
        --homepath=/usr/share/grafana
        --config=/etc/grafana/grafana.ini
        cfg:default.paths.data=/var/lib/grafana
        cfg:default.paths.logs=/var/log/grafana
        cfg:default.paths.plugins=/var/lib/grafana/plugins
        cfg:default.server.root_url="%%(protocol)s://%%(domain)s:%%(http_port)s/graph"
        ENV_AUTH_BASIC
# use /var/log/grafana/grafana.log
stdout_logfile = NONE
stderr_logfile = NONE
autorestart = true

[program:nginx]
priority = 4
command = nginx
stdout_logfile = /var/log/nginx.log
stderr_logfile = /var/log/nginx.log
autorestart = true

[program:cron1]
priority = 5
command = go-cron "0 0 0 * * *" /usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status -l /var/log/logrotate.log /etc/logrotate.conf
stdout_logfile = /var/log/cron1.log
stderr_logfile = /var/log/cron1.log
autorestart = true

[program:cron2]
priority = 5
command = go-cron "0 0 0 * * *" env MYCNF=/opt/.my.cnf /etc/cron.daily/purge-qan-data
stdout_logfile = /var/log/cron2.log
stderr_logfile = /var/log/cron2.log
autorestart = true

[program:qan-api]
priority = 6
environment = PERCONA_DATASTORE_BASEDIR=/usr/share/percona-qan-api/src/github.com/percona/qan-api,PERCONA_DATASTORE_CONF=/etc/percona-qan-api.conf,BASE_PATH=/qan-api
# Sleep to wait for mysql to start up.
command = bash -c "sleep 5 && /usr/sbin/percona-qan-api -srcPath /usr/share/percona-qan-api/src -importPath github.com/percona/qan-api -runMode prod"
stdout_logfile = /var/log/qan-api.log
stderr_logfile = /var/log/qan-api.log
startretries = 60
autorestart = true
stopasgroup = true

[program:prometheus1]
priority = 7
command =
    /usr/sbin/prometheus1
        --config.file=/etc/prometheus1.yml
        --storage.local.path=/opt/prometheus/data
        --web.listen-address=:9094
        --storage.local.retention=ENV_METRICS_RETENTION
        --storage.local.target-heap-size=ENV_METRICS_MEMORY_MULTIPLIED
        --storage.local.chunk-encoding-version=2
        --web.console.libraries=/usr/share/prometheus1/console_libraries
        --web.console.templates=/usr/share/prometheus1/consoles
        --web.external-url=http://localhost:9094/prometheus/
        --web.max-connections=ENV_MAX_CONNECTIONS
stdout_logfile = /var/log/prometheus1.log
stderr_logfile = /var/log/prometheus1.log
autorestart = true
stopwaitsecs = 300

[program:prometheus]
priority = 7
# --web.enable-lifecycle: pmm-managed uses /-/reload path to reload config.
command =
    /usr/sbin/prometheus
        --config.file=/etc/prometheus.yml
        --storage.tsdb.path=/opt/prometheus/data/.prom2-data
        --storage.tsdb.retention=ENV_METRICS_RETENTION
        --web.listen-address=:9090
        --web.console.libraries=/usr/share/prometheus/console_libraries
        --web.console.templates=/usr/share/prometheus/consoles
        --web.external-url=http://localhost:9090/prometheus/
        --web.enable-lifecycle
stdout_logfile = /var/log/prometheus.log
stderr_logfile = /var/log/prometheus.log
autorestart = true
stopwaitsecs = 300

# This is here to support data containers of v1.0.4.
[program:createdb]
priority = 8
# Sleep to wait for mysql to start up.
command = bash -c "sleep 5 && mysql -uroot -vv -e \"CREATE DATABASE IF NOT EXISTS orchestrator; GRANT ALL PRIVILEGES ON orchestrator.* TO 'orchestrator'@'localhost' IDENTIFIED BY 'orchestrator'\""
stdout_logfile = /var/log/createdb.log
stderr_logfile = /var/log/createdb.log
startretries = 60
autorestart = unexpected

# support pmm-data containers <1.5.0
[program:createdb2]
priority = 8
# Sleep to wait for mysql to start up.
command = bash -c 'sleep 5 && mysql -uroot -vv -e "CREATE DATABASE IF NOT EXISTS \`pmm-managed\`; GRANT ALL PRIVILEGES ON \`pmm-managed\`.* TO \"pmm-managed\"@localhost IDENTIFIED BY \"pmm-managed\""'
stdout_logfile = /var/log/createdb2.log
stderr_logfile = /var/log/createdb2.log
startretries = 60
autorestart = unexpected

# support pmm-data containers <1.8.0
[program:createdb3]
priority = 8
# Sleep to wait for mysql to start up.
command = bash -c "sleep 5 && mysql -uroot -vv -e \"GRANT SELECT ON pmm.* TO 'grafana'@'localhost' IDENTIFIED BY 'N9mutoipdtlxutgi9rHIFnjM'\""
stdout_logfile = /var/log/createdb3.log
stderr_logfile = /var/log/createdb3.log
startretries = 60
autorestart = unexpected

[program:orchestrator]
priority = 9
directory = /usr/share/orchestrator
# Sleep to wait for mysql to start up.
command = bash -c "sleep 7 && /usr/sbin/orchestrator http"
stdout_logfile = /var/log/orchestrator.log
stderr_logfile = /var/log/orchestrator.log
startretries = 60
autostart = false
autorestart = true
stopasgroup = true

[program:dashboard-upgrade]
priority = 10
command = /usr/share/percona-dashboards/import-dashboards.py
stdout_logfile = /var/log/dashboard-upgrade.log
stderr_logfile = /var/log/dashboard-upgrade.log
startsecs = 0
startretries = 60
autorestart = unexpected

[program:node_exporter]
priority = 11
command =
    /usr/local/percona/pmm-client/node_exporter
        -web.listen-address=localhost:9100
        -collectors.enabled=diskstats,filefd,filesystem,loadavg,meminfo,netdev,netstat,stat,time,uname,vmstat
stdout_logfile = /var/log/node_exporter.log
stderr_logfile = /var/log/node_exporter.log
autorestart = true

[program:pmm-manage]
priority = 12
command =
    /usr/sbin/pmm-configurator
        -ssh-key-owner pmm
        -grafana-db-path /var/lib/grafana/grafana.db
stdout_logfile = /var/log/pmm-manage.log
stderr_logfile = /var/log/pmm-manage.log
autorestart = true

[program:pmm-managed]
priority = 13
command =
    /usr/sbin/pmm-managed
        -prometheus-config /etc/prometheus.yml
        -prometheus-url http://127.0.0.1:9090/prometheus
        -db-name pmm-managed
        -db-username pmm-managed
        -db-password pmm-managed
stdout_logfile = /var/log/pmm-managed.log
stderr_logfile = /var/log/pmm-managed.log
startretries = 1000000
autorestart = true
